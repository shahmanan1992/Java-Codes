Main interfaces of collection framework :-

Core collection interfaces are the foundation of the Java Collections Framework. Note that all the core collection interfaces are generic; 
for example public interface Collection<E>. The <E> syntax is for Generics and when we declare Collection, we should use it to specify the 
type of Object it can contain. It helps in reducing run-time errors by type-checking the Objects at compile-time.
To keep the number of core collection interfaces manageable, the Java platform doesn’t provide separate interfaces for each variant of each 
collection type. If an unsupported operation is invoked, a collection implementation throws an UnsupportedOperationException.

1. Collection 
This is the root of the collection hierarchy. A collection represents a group of objects known as its elements. The Java platform doesn’t provide 
any direct implementations of this interface.The interface has methods to tell you how many elements are in the collection (size, isEmpty), to check 
whether a given object is in the collection (contains), to add and remove an element from the collection (add, remove), and to provide an iterator 
over the collection (iterator).
// Basic Operations
int size()                        // Returns the number of elements of this Collection
void clear()                      // Removes all the elements of this Collection
boolean isEmpty()                 // Returns true if there is no element in this Collection
boolean add(E element)            // Ensures that this Collection contains the given element
boolean remove(Object element)    // Removes the given element, if present
boolean contains(Object element)  // Returns true if this Collection contains the given element

2. Set
Set is a collection that cannot contain duplicate elements. This interface models the mathematical set abstraction and is used to represent sets, such 
as the deck of cards.The Java platform contains three general-purpose Set implementations: HashSet, TreeSet, and LinkedHashSet. Set interface doesn’t 
allow random-access to an element in the Collection. You can use iterator or for each loop to traverse the elements of a Set.
For example, if s1 and s2 are sets:

s1.contains( s2 ) return true if s2 is a subset of s1
s1.addAll( s2 ) transforms s1 to be s1 union s2
s1.retainAll( s2 ) transforms s1 to be s1 intersection s2
s1.removeAll( s2 ) transforms s1 into s1 - s2 (set difference).

A SortedSet is put in sorted order when it is created and is always maintained in sorted order. An iteration through the contents will always return
 the elements in sorted order. TreeSet is an implementation of SortedSet and HashSet implements Set.have three general purpose Set implementations: HashSet
 , TreeSet and LinkedHashSet. HashSet, which stores its elements in a hash table, is the best performing implementation. However, it does not give any 
 guarantee concerning the order of iteration. TreeSet, which stores its elements in a red-black tree, orders its elements based on their values. TreeSet
 is comparitively slower than HashSet. LinkedHashSet, which is implemented as a hash table with a linked list running through it, orders its elements based
 on the order in which they were inserted into the set. Unlike HashSet, LinkedHashSet guarantees specified ordering at a cost slightly higher than the HashSet.
 Set Interface basic operations include size operation which returns the number of elements in the set. The isEmpty method specifies whether the set is empty 
 or not. The add method adds the specified element to the Set if it is not already present and returns a boolean indicating whether the element was added. 
 Similarly, the remove method removes the specified element from the Set if it is present and returns a boolean indicating whether the element was present. 
 The iterator method returns a iterator over the Set.

 
3. List
List is an ordered collection and can contain duplicate elements. You can access any element from it’s index. List is more like array with dynamic length.
 List is one of the most used Collection type. ArrayList and LinkedList are implementation classes of List interface.ist interface provides useful methods 
 to add an element at specific index, remove/replace element based on index and to get a sub-list using index.

List strList = new ArrayList<>();
//add at last
strList.add(0, "0");
//add at specified index
strList.add(1, "1");
//replace
strList.set(1, "2");
//remove
strList.remove("1");

4.Queue 
Queue is a collection used to hold multiple elements prior to processing. Besides basic Collection operations, a Queue provides additional insertion,
extraction, and inspection operations.Queues typically, but do not necessarily, order elements in a FIFO (first-in, first-out) manner. Among the exceptions
are priority queues, which order elements according to a supplied comparator or the elements’ natural ordering. Whatever the ordering used, the head of
the queue is the element that would be removed by a call to remove or poll. In a FIFO queue, all new elements are inserted at the tail of the queue.


5. Dequeue 
A linear collection that supports element insertion and removal at both ends. The name deque is short for “double ended queue” and is usually pronounced 
“deck”. Most Deque implementations place no fixed limits on the number of elements they may contain, but this interface supports capacity-restricted deques 
as well as those with no fixed size limit.This interface defines methods to access the elements at both ends of the deque. Methods are provided to insert, 
remove, and examine the element.


6. Map
A Map is an object that maps keys to values. A map cannot contain duplicate keys: Each key can map to at most one value.
The Java platform contains three general-purpose Map implementations: HashMap, TreeMap, and LinkedHashMap.
The basic operations of Map are put, get, containsKey, containsValue, size, and isEmpty.
put( K, V ) - add the key-value pair, <K,V>, to the map
get( K ) - return the value associated with key, K.
remove( K ) - delete the mapping of K to its value
HashMap is the preferred implementation of the Map interface.