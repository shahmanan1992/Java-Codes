/*
 *  Java Program to Implement Binary Search Tree
 */

import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Scanner;
import java.util.Stack;
import java.util.TreeSet;

/* Class BSTNode */
class BSTNode
{
	BSTNode left, right;
	String data;

	/* Constructor */
	public BSTNode()
	{
		left = null;
		right = null;
		data = "";
	}
	/* Constructor */
	public BSTNode(String n)
	{
		left = null;
		right = null;
		data = n;
	}
	/* Function to get left node */
	public BSTNode getLeft()
	{
		return left;
	}
	/* Function to get right node */
	public BSTNode getRight()
	{
		return right;
	}
	/* Function to get data from node */
	public String getData()
	{
		return data;
	}   

}
class TreeInOrder
{
	BSTNode treeNode;
	boolean visited;

	public TreeInOrder(BSTNode treeNode, Boolean v) {
		// TODO Auto-generated constructor stub
		this.treeNode=treeNode;
		this.visited=v;
	}
}

class InOrderItr implements Iterator
{
	Stack<TreeInOrder> stack;
	BSTNode root;

	public InOrderItr(BSTNode root) {
		stack = new Stack<TreeInOrder>();
		stack.add(new TreeInOrder(root, false));
		this.root=root;
	}

	@Override
	public boolean hasNext() {
		if(root==null)
			return false;
		
		//System.out.println(stack);

		return !stack.isEmpty();
	}

	@Override
	public String next() {
		if (!hasNext())
		{
			throw new NoSuchElementException("No more nodes remain to iterate");
		}

		while (hasNext()) 
		{
			TreeInOrder top = stack.peek();
			BSTNode treeNode = top.treeNode;

			if (!top.visited) 
			{
				if (treeNode.left != null) 
				{
					stack.add(new TreeInOrder(treeNode.left, false));
				}
				top.visited = true;
			} 
			else 
			{
				stack.pop();
				if (treeNode.right != null) 
				{
					stack.add(new TreeInOrder(treeNode.right, false));
				}
				return treeNode.data;
			}
		}
		return "";
	}

}
/*class TreeIterator implements Iterator
{
	BSTNode next,parent;

	public TreeIterator(BSTNode root) {
		// TODO Auto-generated constructor stub
		next=root;
		if(next == null)
		{
			System.out.println("Tree is Empty");
		}
		while(next.left != null)
		{
			parent=next;
			next=next.left;
		}
	}
	@Override
	public boolean hasNext() {
		// TODO Auto-generated method stub
		return next!=null;
	}

	@Override
	public Object next() {
		// TODO Auto-generated method stub
		if(!hasNext())
			throw new NoSuchElementException();

		BSTNode r=next;

		if(next.left != null)
		{
			while(next.left != null)
			{
				parent=next;
				next=next.left;
			}

		}



		return next.data;
	}

}*/
/* Class BST */
class HpTreeSet extends TreeSet
{
	private BSTNode root;
	String data,val;
	//BSTNode next;
	/* Constructor */
	public HpTreeSet()
	{
		root = null;
	}
	/* Function to check if tree is empty */
	public boolean isEmpty()
	{
		return root == null;
	}
	/* Functions to add data */
	public boolean add(Object obj)
	{

		if(obj instanceof String)
		{
			data=(String)obj;
		}

		root = add(root, data);
		if(root!=null)
			return true;
		else
			return false;
	}
	/* Function to add data recursively */
	private BSTNode add(BSTNode node, String data)
	{
		if (node == null)
			node = new BSTNode(data);
		else
		{
			if (data.compareTo(node.getData())<0)
				node.left = add(node.left, data);
			else
				node.right = add(node.right, data);
		}
		return node;
	}
	/* Functions to clear data */
	public void clear()
	{
		if(root!=null)
		{
			root=null;
		}
	} 



	/* Functions to count number of nodes */
	public int size()
	{
		return size(root);
	}
	/* Function to calculate size recursively */
	private int size(BSTNode r)
	{
		if (r == null)
			return 0;
		else
		{
			int l = 1;
			l += size(r.getLeft());
			l += size(r.getRight());
			return l;
		}
	}
	/* Functions to search for an element */
	public boolean contains(Object obj)
	{
		if(obj instanceof String)
		{
			val=(String)obj;
		}
		return containsString(root, val);
	}
	/* Function to search for an element recursively */
	private boolean containsString(BSTNode r, String val)
	{
		boolean found = false;
		while ((r != null) && !found)
		{
			String rval = r.getData();
			if (val.compareTo(rval)<0)
				r = r.getLeft();
			else if (val.compareTo(rval)>0)
				r = r.getRight();
			else
			{
				found = true;
				break;
			}
			found = containsString(r, val);
		}
		return found;
	}

	public Iterator iterator() {
		return new InOrderItr(root);
	}
	
}