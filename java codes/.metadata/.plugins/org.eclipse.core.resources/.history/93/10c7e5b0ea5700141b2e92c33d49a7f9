/*
 *  Java Program to Implement Binary Search Tree
 */

import java.util.Iterator;
import java.util.Scanner;

/* Class BSTNode */
class BSTNode
{
	BSTNode left, right;
	String data;

	/* Constructor */
	public BSTNode()
	{
		left = null;
		right = null;
		data = "";
	}
	/* Constructor */
	public BSTNode(String n)
	{
		left = null;
		right = null;
		data = n;
	}
	/* Function to set left node */
	public void setLeft(BSTNode n)
	{
		left = n;
	}
	/* Function to set right node */ 
	public void setRight(BSTNode n)
	{
		right = n;
	}
	/* Function to get left node */
	public BSTNode getLeft()
	{
		return left;
	}
	/* Function to get right node */
	public BSTNode getRight()
	{
		return right;
	}
	/* Function to set data to node */
	public void setData(String d)
	{
		data = d;
	}
	/* Function to get data from node */
	public String getData()
	{
		return data;
	}     
}

/* Class BST */
public class HpTreeSet
{
	private BSTNode root;
	String data,val;
	/* Constructor */
	public HpTreeSet()
	{
		root = null;
	}
	/* Function to check if tree is empty */
	public boolean isEmpty()
	{
		return root == null;
	}
	/* Functions to insert data */
	public boolean add(Object obj)
	{

		if(obj instanceof String)
		{
			data=(String)obj;
		}

		root = add(root, data);
		if(root!=null)
			return true;
		else
			return false;
	}
	/* Function to insert data recursively */
	private BSTNode add(BSTNode node, String data)
	{
		if (node == null)
			node = new BSTNode(data);
		else
		{
			if (data.compareTo(node.getData())<0)
				node.left = add(node.left, data);
			else
				node.right = add(node.right, data);
		}
		return node;
	}
	/* Functions to clear data */
	public void clear()
	{
		if(root!=null)
		{
			root=null;
		}
	} 

	public Iterator iterator()
	{
		Iterator it = new Iterator(){

			@Override
			public boolean hasNext() {
				// TODO Auto-generated method stub
				return false;
			}

			@Override
			public Object next() {
				// TODO Auto-generated method stub
				return null;
			}
		};
		return it;
	}
	/*delete(root)
         if (isEmpty())
             System.out.println("Tree Empty");
         else if (search(k) == false)
             System.out.println("Sorry "+ k +" is not present");
         else
         {
             root = delete(root, k);
             System.out.println(k+ " deleted from the tree");
         }
     }
     private BSTNode delete(BSTNode root, int k)
     {
         BSTNode p, p2, n;
         if (root.getData() == k)
         {
             BSTNode lt, rt;
             lt = root.getLeft();
             rt = root.getRight();
             if (lt == null && rt == null)
                 return null;
             else if (lt == null)
             {
                 p = rt;
                 return p;
             }
             else if (rt == null)
             {
                 p = lt;
                 return p;
             }
             else
             {
                 p2 = rt;
                 p = rt;
                 while (p.getLeft() != null)
                     p = p.getLeft();
                 p.setLeft(lt);
                 return p2;
             }
         }
         if (k < root.getData())
         {
             n = delete(root.getLeft(), k);
             root.setLeft(n);
         }
         else
         {
             n = delete(root.getRight(), k);
             root.setRight(n);             
         }
         return root;
     }*/
	/* Functions to count number of nodes */
	public int size()
	{
		return size(root);
	}
	/* Function to count number of nodes recursively */
	private int size(BSTNode r)
	{
		if (r == null)
			return 0;
		else
		{
			int l = 1;
			l += size(r.getLeft());
			l += size(r.getRight());
			return l;
		}
	}
	/* Functions to search for an element */
	public boolean contains(Object obj)
	{
		if(obj instanceof String)
		{
			val=(String)obj;
		}
		return containsString(root, val);
	}
	/* Function to search for an element recursively */
	private boolean containsString(BSTNode r, String val)
	{
		boolean found = false;
		while ((r != null) && !found)
		{
			String rval = r.getData();
			if (val.compareTo(rval)<0)
				r = r.getLeft();
			else if (val.compareTo(rval)>0)
				r = r.getRight();
			else
			{
				found = true;
				break;
			}
			found = containsString(r, val);
		}
		return found;
	}
	/* Function for inorder traversal */
	public void inorder()
	{
		inorder(root);
	}
	private void inorder(BSTNode r)
	{
		if (r != null)
		{
			inorder(r.getLeft());
			System.out.print(r.getData() +" ");
			inorder(r.getRight());
		}
	}
	/* Function for preorder traversal */
	/*   public void preorder()
     {
         preorder(root);
     }
     private void preorder(BSTNode r)
     {
         if (r != null)
         {
             System.out.print(r.getData() +" ");
             preorder(r.getLeft());             
             preorder(r.getRight());
         }
     }*/
	/* Function for postorder traversal */
	/*     public void postorder()
     {
         postorder(root);
     }
     private void postorder(BSTNode r)
     {
         if (r != null)
         {
             postorder(r.getLeft());             
             postorder(r.getRight());
             System.out.print(r.getData() +" ");
         }
     }    */ 
}

/* Class BinarySearchTree */
/* public class HpTreeSet
 {
     public static void main(String[] args)
    {                 
        Scanner scan = new Scanner(System.in);

        BST bst = new BST(); 
        System.out.println("Binary Search Tree Test\n");          
        char ch;

        do    
        {
            System.out.println("\nBinary Search Tree Operations\n");
            System.out.println("1. add ");
            System.out.println("2. clear");
            System.out.println("3. contains");
            System.out.println("4. size");
            System.out.println("5. check empty"); 

            int choice = scan.nextInt();            
            switch (choice)
            {
            case 1 : 
                System.out.println("Enter integer element to insert");
                int n=scan.nextInt();
                Object o=n;
                if(bst.add(o)==true)
                	System.out.println("Element added");                     
                break;                          
            case 2 : 
                bst.clear();                     
                break;                      
            case 3 : 
                System.out.println("Enter integer element to search");
                System.out.println("Search result : "+ bst.contains( scan.nextInt() ));
                break;                                          
            case 4 : 
                System.out.println("Nodes = "+ bst.size());
                break;     
            case 5 :  
                System.out.println("Empty status = "+ bst.isEmpty());
                break;            
            default : 
                System.out.println("Wrong Entry \n ");
                break;   
            }*/
/*  Display tree  */ 
/*   System.out.print("\nPost order : ");
            bst.postorder();
            System.out.print("\nPre order : ");
            bst.preorder();*/

/*   System.out.println("\nDo you want to continue (Type y or n) \n");
            ch = scan.next().charAt(0);                        
        } while (ch == 'Y'|| ch == 'y');   
        scan.close();
        System.out.print("\nIn order : ");
        bst.inorder();

    }
 }*/